/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behavior includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* layer names */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };

        parang_left: parang_left {
            compatible = "zmk,behavior-mod-morph";
            label = "PARANG_LEFT";
            bindings = <&paren_left>, <&angle_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parang_right: parang_right {
            compatible = "zmk,behavior-mod-morph";
            label = "PARANG_RIGHT";
            bindings = <&paren_right>, <&angle_right>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_shiftlock: shift_shiftlock {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_SHIFTLOCK";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kt LEFT_SHIFT>;
        };

        hr_left: hr_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <240>;
            quick-tap-ms = <300>;
            hold-trigger-key-positions = <55 55 56 72 73 74 78 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 74 75 76 77 78 79 53 54 69 70 52 53 54 70 71>;
            hold-trigger-on-release;
            require-prior-idle-ms = <160>;
        };

        hr_right: hr_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <240>;
            quick-tap-ms = <300>;
            hold-trigger-key-positions = <0 1 10 11 12 13 14 22 23 24 25 26 34 35 36 37 38 46 47 48 49 50 64 65 66 67 68 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 64 65 66 67 68 69 70 71 72 55 56 72 73 74 57>;
            require-prior-idle-ms = <160>;
            hold-trigger-on-release;
        };

        layer_hold: layer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            flavor = "balanced";
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        paren_left: parang_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N9)>;
            label = "PARANG_LEFT";
        };

        paren_right: paren_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N0)>;
            label = "PAREN_RIGHT";
        };

        angle_left: angle_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(COMMA)>;
            label = "ANGLE_LEFT";
        };

        angle_right: angle_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(PERIOD)>;
            label = "ANGLE_RIGHT";
        };

        Undo: Undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>;
            label = "UNDO";
        };

        Redo: Redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(Z))>;
            label = "REDO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp F1      &kp F2            &kp F3               &kp F4               &kp F5                                                                                                                  &kp F6                  &kp F7                &kp F8                &kp F9                    &kp F10
&kp SLASH   &kp N1            &kp N2               &kp N3               &kp N4                 &kp N5                                                                                   &kp N6  &kp N7                  &kp N8                &kp N9                &kp N0                    &kp MINUS
&kp TAB     &kp Q             &kp W                &kp E                &kp R                  &kp T                                                                                    &kp Y   &kp U                   &kp I                 &kp O                 &kp SEMI                  &kp SQT
&kp ESC     &hr_left LCTRL A  &hr_left LEFT_ALT S  &hr_left LEFT_GUI D  &hr_left LEFT_SHIFT F  &kp G                                                                                    &kp H   &hr_right LEFT_SHIFT J  &hr_right LEFT_GUI K  &hr_right LEFT_ALT L  &hr_right LEFT_CONTROL P  &kp EQUAL
&kp F11     &kp Z             &kp X                &kp C                &kp V                  &kp B   &shift_caps              &kp UP_ARROW  &kp DOWN  &kp LEFT  &kp RIGHT  &kp TAB    &kp N   &kp M                   &kp COMMA             &kp DOT               &kp GRAVE                 &kp F12
&magic 4 0  &none             &none                &none                &none                          &layer_hold 4 BACKSPACE  &kp DEL       &lower    &lower    &kp RET    &kp SPACE          &parang_left            &kp LEFT_BRACKET      &kp RIGHT_BRACKET     &parang_right             &kp BACKSLASH
            >;
        };

        layer_Lower {
            bindings = <
&tog 3      &none      &none           &none           &none                                                                                              &none       &none         &none         &none            &kp PAUSE_BREAK
&trans      &none      &none           &none           &none            &kp HOME                                                   &kp LEFT_PARENTHESIS   &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
&trans      &none      &none           &kp UP_ARROW    &none            &kp END                                                    &kp RIGHT_PARENTHESIS  &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
&trans      &none      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                  &kp PERCENT            &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp KP_PLUS      &none
&trans      &kp K_APP  &none           &kp F11         &kp F12          &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA              &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &trans
&magic 4 0  &kp CAPS   &kp INS         &kp F11         &kp F12                     &trans  &trans  &trans  &trans  &trans  &trans                         &kp KP_N0   &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     &trans
            >;
        };

        layer_Media {
            bindings = <
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_NEXT                                                                  &trans  &trans  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&trans                &trans                &trans      &trans            &trans      &trans                                                  &trans  &trans  &trans  &trans      &trans             &trans
&trans                &trans                &trans      &trans            &trans      &trans                                                  &trans  &trans  &trans  &trans      &trans             &trans
&trans                &trans                &trans      &trans            &trans      &trans                                                  &trans  &trans  &trans  &trans      &trans             &trans
&trans                &trans                &trans      &trans            &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans             &trans
&trans                &trans                &trans      &trans            &trans              &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans             &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        layer_Cursor {
            bindings = <
&none  &none      &none     &none     &none                                                                 &none          &none        &none      &none  &none
&none  &none      &none     &none     &none      &none                                            &none     &none          &none        &none      &none  &none
&none  &none      &none     &none     &none      &none                                            &none     &Undo          &Redo        &none      &none  &none
&none  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none                                            &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &none  &none
&none  &none      &none     &none     &none      &none  &none  &none  &none  &none  &none  &none  &none     &kp PAGE_DOWN  &kp PAGE_UP  &none      &none  &none
&none  &none      &none     &none     &none             &none  &none  &none  &none  &none  &none            &none          &none        &none      &none  &none
            >;
        };
    };
};
